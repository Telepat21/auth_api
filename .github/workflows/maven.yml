# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13  # Use the desired PostgreSQL version
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: runner
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_db

    steps:
    - name: Checkout API Repository
      uses: actions/checkout@v3

    - name: Clone Test Repository
      run: | 
        git clone https://github.com/Telepat21/auth-tests.git
      env: 
        your_token: ${{ secrets.TEST_REPO_PAT }}
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'

    - name: Make Gradle wrapper executable
      run: chmod +x gradlew

    # - name: Initialize Database
    #   run: |
    #     psql -h localhost -U runner -d auth_db -c "CREATE USER runner WITH PASSWORD 'postgres';"
    #     psql -h localhost -U runner -d auth_db -c "GRANT CONNECT ON DATABASE auth_db TO runner;"
    #     psql -h localhost -U runner -d auth_db -c "GRANT USAGE ON SCHEMA public TO runner;"
    #     psql -h localhost -U runner -d auth_db -c "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO runner;"
    #     psql -h localhost -U runner -d auth_db -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO runner;"
    #   env:
    #     PGPASSWORD: postgres

    - name: Build API server
      run: 
        ./gradlew build

    - name: Install Flyway
      run: |
        curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.17.0/flyway-commandline-9.17.0-linux-x64.tar.gz | tar xvz
        sudo ln -s `pwd`/flyway-9.17.0/flyway /usr/local/bin

    - name: Run Flyway migrations
      run: flyway migrate -url=jdbc:postgresql://localhost:5432/auth_db -user=runner -password=postgres -locations=$GITHUB_WORKSPACE/src/main/resources/db/migration/V1__20250108
    - name: Check directory
      run: |
        ls -lsa $GITHUB_WORKSPACE/ 
        cat $GITHUB_WORKSPACE/gradlew
      
    # - name: Start API server
    #   run: ./gradlew bootRun

    # - name: Start API server
    #   run: ./gradlew bootRun > server.log 2>&1 &
    #   env:
    #     SERVER_PORT: 8083

    - name: Check PostgreSQL Connection
      run: |
        for i in {1..10}; do
            if nc -zv localhost 5432; then
              echo "PostgreSQL is up.";
              break;
            else
              echo "Waiting for PostgreSQL...";
              sleep 5;
            fi
        done
        if ! nc -zv localhost 5432; then
          echo "PostgreSQL did not start in time.";
        fi

    - name: Check Database Connection
      run: |
        psql -h localhost -U runner -d auth_db -c '\dt'
      env:
        PGPASSWORD: postgres

    - name: Start API server
      run: 
        ./gradlew bootRun --stacktrace &
        sleep 30  # Wait for server to start
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/auth_db
        SPRING_DATASOURCE_USERNAME: runner
        SPRING_DATASOURCE_PASSWORD: postgres
        SERVER_PORT: 8083

    - name: Print Server Logs
      run: cat server.log
    
    - name: Test Server Endpoint
      run: |
        curl -f http://localhost:8083/health || exit 1
          
    - name: Wait for Server to Start
      run: |
        for i in {1..10}; do
            if nc -zv localhost 8083; then
                echo "Server is up on port 8083.";
                break;
            else  
                echo "Waiting for server to start...";
                sleep 5;
            fi
        done
        if ! nc -zv localhost 8083; then
            echo "Server did not start on port 8083 in time.";
            exit 1;
        fi
        
    - name: Install Dependencies
      working-directory: ./auth-tests
      run: mvn clean install

    - name: Run Maven Tests
      working-directory: ./auth-tests
      run: mvn test
