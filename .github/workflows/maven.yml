# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest 
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: romanmaksymovych
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_db

    steps:
    - name: Checkout API Repository
      uses: actions/checkout@v3

    - name: Clone Test Repository
      run: | 
        git clone https://github.com/Telepat21/auth-tests.git
      env: 
        your_token: ${{ secrets.TEST_REPO_PAT }}
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'

    - name: Make Gradle wrapper executable
      run: chmod +x gradlew

    - name: Install Flyway
      run: |
        curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/9.22.0/flyway-commandline-9.22.0-linux-x64.tar.gz | tar xvz
        sudo ln -s `pwd`/flyway-9.22.0/flyway /usr/local/bin

    - name: Run chmod
      run: chmod +x $GITHUB_WORKSPACE/src/main/resources/db/migration/V1__20250108.sql

    - name: Run Flyway migrations
      run: flyway migrate -url=jdbc:postgresql://localhost:5432/auth_db -user=romanmaksymovych -password=postgres -locations=filesystem:$GITHUB_WORKSPACE/src/main/resources/db/migration -X

    - name: Check PostgreSQL Connection
      run: |
        for i in {1..10}; do
            if nc -zv localhost 5432; then
              echo "PostgreSQL is up.";
              break;
            else
              echo "Waiting for PostgreSQL...";
              sleep 5;
            fi
        done
        if ! nc -zv localhost 5432; then
          echo "PostgreSQL did not start in time.";
        fi

    - name: Check Database Connection
      run: |
        psql -h localhost -U romanmaksymovych -d auth_db -c '\dt'
      env:
        PGPASSWORD: postgres

    - name: Start API server
      run: 
        ./gradlew bootRun --stacktrace &
        sleep 30  # Wait for server to start
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/auth_db
        SPRING_DATASOURCE_USERNAME: romanmaksymovych
        SPRING_DATASOURCE_PASSWORD: postgres
        SERVER_PORT: 8083
    
    - name: Test Server Endpoint
      run: |
        curl -f http://localhost:8083/health
        
    - name: Install Dependencies
      working-directory: ./auth-tests
      run: mvn clean install

    - name: Run Maven Tests
      working-directory: ./auth-tests
      run: mvn test
